name: Setup

inputs:
  debug_enabled:
    description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
    type: boolean
    required: false
    default: false
  debug_os:
    description: 'which runner os to run the tmate action in (if the tmate action is run)'
    type: string
    default: 'windows-2019'
    required: false
  debug_arch:
    description: 'which runner arch to run the tmate action in (if the tmate action is run)'
    type: string
    default: 'x86_64'
    required: false
  debug_detached:
    description: 'whether to launch tmate in detached mode (if the tmate action is run)'
    type: boolean
    required: false
    default: true
  llvm_commit:
    description: 'llvm commit to build'
    type: string
    required: false
    default: ''

outputs:
  LLVM_PROJECT_COMMIT: ${{ steps.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
  DATETIME: ${{ steps.get_llvm_project_commit.outputs.DATETIME }}
  WORKSPACE_ROOT: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}

runs:
  using: "composite"
  steps:
    - name: Get llvm-project commit
      id: get_llvm_project_commit
      run: |
        
        if [ x"${{ inputs.llvm_commit }}" == x"" ]; then
          sudo apt install jq
          LLVM_PROJECT_COMMIT=$(curl -s https://api.github.com/repos/llvm/llvm-project/commits/main | jq -r '.sha[:8]')
        else
          LLVM_PROJECT_COMMIT="${{ inputs.llvm_commit }}"
        fi
        echo "LLVM_PROJECT_COMMIT=${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT
        DATETIME=$(date +"%Y%m%d%H")
        echo "DATETIME=${DATETIME}" | tee -a $GITHUB_OUTPUT

    - name: Setup tmate session
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled && inputs.debug_os == matrix.os && inputs.debug_arch == matrix.arch }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
        detached: ${{ inputs.debug_detached }}

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.9
      with:
        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.arch }}  # Make cache specific to OS
        max-size: "5G"

    - uses: ilammy/msvc-dev-cmd@v1.4.1
      if: ${{ matrix.os == 'windows-2019' }}

    - name: Set up Visual Studio shell
      if: ${{ matrix.os == 'windows-2019' }}
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: MS Build
      if: ${{ matrix.os == 'windows-2019' }}
      uses: microsoft/setup-msbuild@v1.1

    - name: Free disk space
      if: contains(matrix.os, 'ubuntu')
      uses: jlumbroso/free-disk-space@76866dbe54312617f00798d1762df7f43def6e5c # v1.2.0
      with:
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: false # This frees space on the wrong partition.
        tool-cache: false # This includes Python, which we need.

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ninja
      uses: llvm/actions/install-ninja@6a57890d0e3f9f35dfc72e7e48bc5e1e527cdd6c # Jan 17

    - name: Install cross-compilation toolchain
      shell: bash
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.arch == 'aarch64' }}
      run: |
        
        sudo apt-get update
        sudo apt-get install -y binutils-aarch64-linux-gnu \
          g++-aarch64-linux-gnu gcc-aarch64-linux-gnu

    - name: pip install standard tools
      run: pip install cibuildwheel wheel

    - name: Set workspace root
      id: workspace_root
      shell: bash
      run: |
        
        if [ x"${{ matrix.os }}" == x"windows-2019" ]; then
          WORKSPACE_ROOT="/C/a"
        else
          WORKSPACE_ROOT=${GITHUB_WORKSPACE}
        fi
        
        mkdir -p $WORKSPACE_ROOT
        
        # this needs to be changed to windows style pathing because this string is used down stream 
        # by ninja/cmake/etc to build paths
        if [ x"${{ matrix.os }}" == x"windows-2019" ]; then
          WORKSPACE_ROOT="C:\a"
        fi
        echo "WORKSPACE_ROOT=$WORKSPACE_ROOT" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT

      # ccache config stuff

    - name: Configure ccache dir on host ubuntu
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      shell: bash
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      id: configure_ccache_dir_on_host
      run: |
        
        HOST_CCACHE_DIR="$(ccache --get-config cache_dir)"
        mkdir -p $HOST_CCACHE_DIR
        echo "HOST_CCACHE_DIR=$HOST_CCACHE_DIR" | tee -a $GITHUB_ENV
        echo "HOST_CCACHE_DIR=$HOST_CCACHE_DIR" | tee -a $GITHUB_OUTPUT

    - name: Configure ccache on Mac
      shell: bash
      if: ${{ matrix.os == 'macos-11' }}
      run: echo "/opt/homebrew/opt/ccache/libexec" >> $GITHUB_PATH

    - name: Configure ccache on ubuntu
      shell: bash
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: echo "/usr/lib/ccache:/usr/lib64/ccache:/usr/lib/ccache/bin" >> $GITHUB_PATH

