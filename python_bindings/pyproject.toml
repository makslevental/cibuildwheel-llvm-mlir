[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "ninja",
    "cmake>=3.12",
    "pybind11[global]>=2.10.4",
    "numpy",
    "dataclasses",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
build-verbosity = 3
build = "cp310-* cp311-*"

[tool.cibuildwheel.linux]
skip = ["*-manylinux_i686", "*-musllinux*"]
environment-pass = [
    "CIBW_ARCHS",
    "LLVM_PROJECT_COMMIT",
    "LLVM_DATETIME",
    "BUILD_CUDA",
    "BUILD_OPENMP",
    "BUILD_VULKAN",
]
before-all = [
    "{project}/scripts/docker_prepare_ccache.sh",
]
before-build = [
    "pip install mlir-native-tools -f https://makslevental.github.io/wheels",
    "{project}/scripts/install_cuda.sh",
    "{project}/scripts/install_vulkan.sh",
]
repair-wheel-command = [
    "LD_LIBRARY_PATH=$PWD/mlir/lib auditwheel repair -w {dest_dir} {wheel} --exclude libcuda.so.1 --exclude libvulkan.so.1"
]

[tool.cibuildwheel.macos]
before-build = [
#    "{project}/scripts/install_vulkan.sh",
]
repair-wheel-command = [
    "DYLD_FALLBACK_LIBRARY_PATH=$PWD/mlir/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"
]

[tool.cibuildwheel.windows]
before-build = [
    "pip install delvewheel",
    "{project}\\scripts\\install_vulkan.sh",
]
#repair-wheel-command = 'delvewheel repair --add-path "" -w {dest_dir} {wheel}'
repair-wheel-command = ''
