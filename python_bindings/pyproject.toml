[build-system]
requires = [
    "pip",
    "setuptools>=42",
    "wheel",
    "ninja",
    "cmake>=3.12",
    "pybind11[global]>=2.10.4",
    "numpy",
    "dataclasses",
    "mlir-native-tools",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
environment = { PIP_FIND_LINKS = "https://github.com/makslevental/mlir-wheels/releases/expanded_assets/latest" }
build-verbosity = 3
build = "cp310-* cp311-*"

[tool.cibuildwheel.linux]
skip = ["*-manylinux_i686", "*-musllinux*"]
environment-pass = [
    "CIBW_ARCHS",
    "LLVM_PROJECT_COMMIT",
    "LLVM_DATETIME",
    "BUILD_CUDA",
    "BUILD_OPENMP",
    "BUILD_VULKAN",
    "CMAKE_GENERATOR",
    "CMAKE_ARGS",
    "PIP_FIND_LINKS",
]
before-all = [
    "{project}/scripts/docker_prepare_ccache.sh",
]
before-build = [
    "{project}/scripts/install_cuda.sh",
    "{project}/scripts/install_vulkan.sh",
]
repair-wheel-command = [
    'LD_LIBRARY_PATH=$(python setup.py install_correct_mlir)/lib auditwheel repair -L "./mlir/_mlir_libs" -w {dest_dir} {wheel} --exclude libcuda.so.1 --exclude libvulkan.so.1'
]

[tool.cibuildwheel.macos]
before-build = [
    "{project}/scripts/install_vulkan.sh",
]
repair-wheel-command = [
    "DYLD_FALLBACK_LIBRARY_PATH=$(python setup.py install_correct_mlir)/lib delocate-wheel -L mlir/_mlir_libs --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
]

[tool.cibuildwheel.windows]
before-build = [
    "pip install delvewheel",
    "bash {project}\\scripts\\install_vulkan.sh",
]
repair-wheel-command = '$env:FOO = python setup.py install_correct_mlir; delvewheel repair --add-path "$env:FOO\lib" -v -w {dest_dir} {wheel}'
#repair-wheel-command = "delvewheel repair --add-path $(python setup.py install_correct_mlir)/lib -v -w {dest_dir} {wheel}"
