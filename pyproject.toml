[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "ninja",
    "cmake>=3.12",
    "pybind11[global]>=2.10.4",
    "numpy",
    "dataclasses"
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
build-verbosity = 3
build = "cp311-*"
before-build = [
    "rm -rf {project}/build",
    "rm -rf *egg*",
]
skip = ["*-manylinux_i686", "*-musllinux*"]

[tool.cibuildwheel.linux]
#archs = ["x86_64", "aarch64"]
before-all = [
    "{project}/scripts/docker_prepare_ccache.sh",
]
before-build = [
    "{project}/scripts/install_cuda.sh",
    "{project}/scripts/install_vulkan.sh",
    "{project}/scripts/apply_patches.sh",
]
before-test = "ccache --show-stats"
environment-pass = [
    "BUILD_CUDA",
    "BUILD_OPENMP",
    "BUILD_VULKAN",
    "CIBW_ARCHS",
    "HOST_CCACHE_DIR",
    "LLVM_NATIVE_TOOL_DIR",
    "LLVM_PROJECT_COMMIT",
    "LLVM_DATETIME",
    "LLVM_PROJECT_MAIN_SRC_DIR",
    "MATRIX_OS",
    "PARALLEL_LEVEL",
    "CMAKE_GENERATOR",
]
manylinux-aarch64-image = "dockcross/manylinux2014-aarch64"
repair-wheel-command = ""

[tool.cibuildwheel.linux.environment]
PATH = "/usr/lib/ccache:/usr/lib64/ccache:/usr/lib/ccache/bin:$PATH"

[tool.cibuildwheel.macos]
before-build = [
    "{project}/scripts/install_vulkan.sh",
    "{project}/scripts/apply_patches.sh",
]
before-test = "ccache --show-stats"
repair-wheel-command = ""

[tool.cibuildwheel.macos.environment]
PATH = "/opt/homebrew/opt/ccache/libexec:$PATH"

[tool.cibuildwheel.windows]
#before-build = "pip install delvewheel"
before-build = [
    "{project}\\scripts\\install_vulkan.sh",
    "{project}\\scripts\\apply_patches.sh",
]
# repair-wheel-command = 'delvewheel repair --add-path "$(realpath $(dirname $(find . -name MLIR-C.lib | tail -n1)))" -L \python_packages\mlir_core\mlir\_mlir_libs -w {dest_dir} {wheel}'
repair-wheel-command = ""

#[tool.cibuildwheel.windows.environment]
#PATH = "/usr/lib/ccache:$HOME/.cargo/bin:$PATH"
#archs = ["AMD64", "ARM64"]
#before-all = "choco install ccache"
#before-test = "ccache --show-stats"