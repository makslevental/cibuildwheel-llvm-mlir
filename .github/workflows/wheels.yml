name: Wheels

on:
  workflow_dispatch:
    inputs:
      MLIR_WHEEL_VERSION:
        description: 'mlir commit'
        type: string
        required: false
        default: ''
  workflow_call:
    inputs:
      MLIR_WHEEL_VERSION:
        description: 'mlir commit'
        type: string
        required: false
        default: ''

jobs:

  build:

    continue-on-error: true

    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: ubuntu-20.04
            ARCH: x86_64

          - OS: ubuntu-20.04
            ARCH: aarch64

          - OS: ubuntu-20.04
            ARCH: x86_64
            BUILD_CUDA: true

          - OS: ubuntu-20.04
            ARCH: x86_64
            BUILD_VULKAN: true

          - OS: ubuntu-20.04
            ARCH: x86_64
            BUILD_OPENMP: true

          - OS: windows-2019
            ARCH: AMD64

          - OS: macos-11
            ARCH: x86_64

          - OS: macos-11
            ARCH: arm64

          - OS: macos-11
            ARCH: arm64
            BUILD_VULKAN: true

          - OS: macos-11
            ARCH: arm64
            BUILD_OPENMP: true

    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            .github/actions

      - uses: ./.github/actions/setup_base
        id: setup_base
        with:
          MATRIX_OS: ${{ matrix.OS }}
          MATRIX_ARCH: ${{ matrix.ARCH }}

      - uses: ./.github/actions/setup_ccache
        id: setup_ccache
        with:
          MATRIX_OS: ${{ matrix.OS }}
          MATRIX_ARCH: ${{ matrix.ARCH }}

      # build

      - name: cibuildwheel python bindings
        if: ${{ matrix.OS != 'ubuntu-20.04' || matrix.ARCH != 'aarch64' }}
        shell: bash
        working-directory: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}
        run: |
          
          cp -R scripts python_bindings/scripts
          pushd python_bindings
          
          BUILD_CUDA=${{ matrix.BUILD_CUDA }} \
          BUILD_OPENMP=${{ matrix.BUILD_OPENMP }} \
          BUILD_VULKAN=${{ matrix.BUILD_VULKAN }} \
          CIBW_ARCHS=${{ matrix.ARCH }} \
          CMAKE_GENERATOR=Ninja \
          HOST_CCACHE_DIR=${{ steps.setup_ccache.outputs.HOST_CCACHE_DIR }} \
          MATRIX_OS=${{ matrix.OS }} \
          MLIR_WHEEL_VERSION=${{ inputs.MLIR_WHEEL_VERSION }} \
          cibuildwheel --output-dir ../wheelhouse
          
          popd

      - name: cibuildwheel python bindings aarch64 cp310
        if: ${{ matrix.OS == 'ubuntu-20.04' && matrix.ARCH == 'aarch64' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.ARCH }}
          distro: ubuntu20.04
          dockerRunArgs: --volume "${{ steps.setup_base.outputs.WORKSPACE_ROOT }}:/workspace"
          install: |
            
            apt-get update -q -y
            apt-get install -q -y ninja-build build-essential cmake python3 python3-pip python-is-python3 curl
            curl -fsSL test.docker.com -o get-docker.sh && sh get-docker.sh
            usermod -aG docker root
            pip install cibuildwheel

          run: |
            
            cd /workspace
            
            HOST_CCACHE_DIR=/workspace/.ccache
            ls -l $HOST_CCACHE_DIR
            
            cp -R scripts python_bindings/
            
            pushd python_bindings
            
            BUILD_CUDA=${{ matrix.BUILD_CUDA }} \
            BUILD_OPENMP=${{ matrix.BUILD_OPENMP }} \
            BUILD_VULKAN=${{ matrix.BUILD_VULKAN }} \
            CIBW_ARCHS=${{ matrix.ARCH }} \
            CIBW_BUILD=cp310-manylinux_aarch64 \
            CMAKE_GENERATOR=Ninja \
            GLIBCXX_USE_CXX11_ABI=0 \
            HOST_CCACHE_DIR=$HOST_CCACHE_DIR \
            MATRIX_OS=${{ matrix.OS }} \
            MLIR_WHEEL_VERSION=${{ inputs.MLIR_WHEEL_VERSION }} \
            cibuildwheel --output-dir ../wheelhouse
            
            popd

            # cp -a ./wheelhouse/.ccache/. /.ccache/

      - name: cibuildwheel python bindings aarch64 cp311
        if: ${{ matrix.OS == 'ubuntu-20.04' && matrix.ARCH == 'aarch64' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.ARCH }}
          distro: ubuntu20.04
          dockerRunArgs: --volume "${{ steps.setup_base.outputs.WORKSPACE_ROOT }}:/workspace"
          install: |
            
            apt-get update -q -y
            apt-get install -q -y ninja-build build-essential cmake python3 python3-pip python-is-python3 curl
            curl -fsSL test.docker.com -o get-docker.sh && sh get-docker.sh
            usermod -aG docker root
            pip install cibuildwheel

          run: |
            cd /workspace
            
            HOST_CCACHE_DIR=/workspace/.ccache
            ls -l $HOST_CCACHE_DIR
            
            cp -R scripts python_bindings/
            
            pushd python_bindings
            
            BUILD_CUDA=${{ matrix.BUILD_CUDA }} \
            BUILD_OPENMP=${{ matrix.BUILD_OPENMP }} \
            BUILD_VULKAN=${{ matrix.BUILD_VULKAN }} \
            CIBW_ARCHS=${{ matrix.ARCH }} \
            CIBW_BUILD=cp311-manylinux_aarch64 \
            CMAKE_GENERATOR=Ninja \
            GLIBCXX_USE_CXX11_ABI=0 \
            HOST_CCACHE_DIR=$HOST_CCACHE_DIR \
            MATRIX_OS=${{ matrix.OS }} \
            MLIR_WHEEL_VERSION=${{ inputs.MLIR_WHEEL_VERSION }} \
            cibuildwheel --output-dir ../wheelhouse
            
            popd

            # cp -a ./wheelhouse/.ccache/. /.ccache/

      # done

      - name: Upload wheels
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          path: ${{ steps.setup_base.outputs.WORKSPACE_ROOT }}/wheelhouse/*.whl
          name: build_artifact_python_bindings

  upload_bindings_wheels:

    needs: build

    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: build_artifact_python_bindings
          path: dist

      - name: Release current commit
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "dist/*.whl"
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "latest"
          name: "latest"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true

      - name: Release current commit
        uses: ncipollo/release-action@v1.12.0
        with:
          owner: makslevental
          repo: wheels
          artifacts: "dist/*.whl"
          token: "${{ secrets.WHEELS_REPO }}"
          tag: "i"
          name: "i"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true
