name: Wheels

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        type: boolean
        required: false
        default: false
      debug_os:
        description: 'which runner os to run the tmate action in (if the tmate action is run)'
        type: string
        default: 'windows-2019'
        required: false
      debug_detached:
        description: 'whether to launch tmate in detached mode (if the tmate action is run)'
        type: boolean
        required: false
        default: true
      llvm_commit:
        description: 'llvm commit to build'
        type: string
        required: false
        default: ''

  pull_request:
  release:
    types:
      - published

  schedule:
    # At minute 0 past hour 1, 7, 13, and 19. (see https://crontab.guru)
    - cron: '00 01,07,13,19 * * *'

jobs:

  get_llvm_project_commit:

    name: Get latest LLVM commit

    runs-on: ubuntu-latest
    outputs:
      LLVM_PROJECT_COMMIT: ${{ steps.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
    steps:
      - name: Get llvm-project commit
        id: get_llvm_project_commit
        run: |
          if [ x"${{ inputs.llvm_commit }}" == x"" ]; then
            sudo apt install jq
            LLVM_PROJECT_COMMIT=$(curl -s https://api.github.com/repos/llvm/llvm-project/commits/main | jq -r '.sha[:8]')
          else
            LLVM_PROJECT_COMMIT="${{ inputs.llvm_commit }}"
          fi
          echo "LLVM_PROJECT_COMMIT=${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT

  build_wheels:
    name: ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.build_cuda && 'cuda' || '' }} ${{ matrix.build_vulkan && 'vulkan' || '' }} ${{ matrix.build_openmp && 'openmp' || '' }}

    needs: get_llvm_project_commit
    continue-on-error: true

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: x86_64
            build_cuda: true
            build_vulkan: true
            build_openmp: true
          - os: ubuntu-20.04
            arch: x86_64
            native_tools_artifact: ubuntu-20.04-x86_64-native-tools
#          - os: ubuntu-20.04
#            build_vulkan: false
#            build_openmp: false
#            arch: aarch64
#            native_tools_artifact: ubuntu-20.04-x86_64-native-tools
          - os: windows-2019
            arch: AMD64
            native_tools_artifact: windows-2019-AMD64-native-tools
#          - os: windows-2019
#            arch: ARM64
          - os: macos-11
            arch: x86_64
            native_tools_artifact: macos-11-x86_64-native-tools
          - os: macos-11
            arch: arm64
          - os: macos-11
            arch: arm64
            build_vulkan: true
            build_openmp: true
    outputs:
      LLVM_PROJECT_COMMIT: ${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
      NATIVE_TOOLS_ARTIFACT: ${{ matrix.native_tools_artifact }}

    steps:
    - uses: actions/checkout@v3

    - name: Free disk space
      if: contains(matrix.os, 'ubuntu')
      uses: jlumbroso/free-disk-space@76866dbe54312617f00798d1762df7f43def6e5c # v1.2.0
      with:
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: false # This frees space on the wrong partition.
        tool-cache: false # This includes Python, which we need.

    - name: Get LLVM
      shell: bash
      run: |
        curl -s https://codeload.github.com/llvm/llvm-project/zip/${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }} -o llvm.zip
        unzip -q llvm.zip
        mv llvm-project-${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }} llvm-project
        echo "LLVM_PROJECT_MAIN_SRC_DIR=$PWD/llvm-project" | tee -a $GITHUB_ENV
        echo "LLVM_PROJECT_HOST_MAIN_BINARY_DIR=$PWD/build_host" | tee -a $GITHUB_ENV

    # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled && inputs.debug_os == matrix.os }}
      with:
        limit-access-to-actor: true
        detached: ${{ inputs.debug_detached }}

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.9
      with:
        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.arch }}  # Make cache specific to OS
        max-size: "5G"
        append-timestamp: false
#        variant: sccache

    - name: Configure ccache dir on host
      id: configure_ccache_dir_on_host
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        HOST_CCACHE_DIR="$(ccache --get-config cache_dir)"
        mkdir -p $HOST_CCACHE_DIR
        echo "HOST_CCACHE_DIR=$HOST_CCACHE_DIR" | tee -a $GITHUB_ENV
        echo "HOST_CCACHE_DIR=$HOST_CCACHE_DIR" | tee -a $GITHUB_OUTPUT

    - name: Install Ninja
      uses: llvm/actions/install-ninja@6a57890d0e3f9f35dfc72e7e48bc5e1e527cdd6c # Jan 17

    - name: Build host llvm-tblgen/mlir-tblgen
      shell: bash
      id: build_host_tools
      if: ${{ matrix.native_tools_artifact != '' }}
      run: |
        if [ x"${{ matrix.os }}" == x"ubuntu-20.04" ]; then
          export "STATIC_FLAGS=-static-libgcc -static-libstdc++"
        fi
        cmake \
          -G Ninja \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_FLAGS="-O2 ${STATIC_FLAGS}" \
          -DLLVM_ENABLE_PROJECTS=mlir \
          -DLLVM_ENABLE_TERMINFO=OFF \
          -DLLVM_ENABLE_ZLIB=OFF \
          -DLLVM_ENABLE_ZSTD=OFF \
          -DLLVM_TARGETS_TO_BUILD=X86 \
          -S${LLVM_PROJECT_MAIN_SRC_DIR}/llvm \
          -B${LLVM_PROJECT_HOST_MAIN_BINARY_DIR}

        cmake --build ${LLVM_PROJECT_HOST_MAIN_BINARY_DIR} \
          --target llvm-tblgen mlir-tblgen mlir-linalg-ods-yaml-gen mlir-pdll llvm-config -j 20

    - name: Tar host tools
      shell: bash
      if: ${{ matrix.native_tools_artifact != '' }}
      run: |
        TARF="$PWD/${{ matrix.os }}-${{ matrix.arch }}-native_tools.tar.xz"
        pushd $LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin
        XZ_OPT='-T0 -9' tar -cJ -f $TARF llvm-tblgen* mlir-tblgen* mlir-linalg-ods-yaml-gen* mlir-pdll* llvm-config*
        popd

    - name: Upload host tools
      if: ${{ matrix.native_tools_artifact != '' }}
      uses: actions/upload-artifact@v3
      with:
        path: ${{ matrix.os }}-${{ matrix.arch }}-native_tools.tar.xz
        name: native_tools

    - uses: pypa/cibuildwheel@v2.13.0
      env:
        BUILD_CUDA: ${{ matrix.build_cuda }}
        BUILD_OPENMP: ${{ matrix.build_openmp }}
        BUILD_VULKAN: ${{ matrix.build_vulkan }}
        CIBW_ARCHS: ${{ matrix.arch }}
        HOST_CCACHE_DIR: ${{ steps.configure_ccache_dir_on_host.outputs.HOST_CCACHE_DIR }}
        LLVM_NATIVE_TOOL_DIR: ${{ matrix.arch == 'aarch64' && '/project/build_host/bin' || '' }}
        LLVM_PROJECT_COMMIT: ${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
        LLVM_PROJECT_MAIN_SRC_DIR: ${{ matrix.os == 'ubuntu-20.04' && '/project/llvm-project' || 'llvm-project' }}
        MATRIX_OS: ${{ matrix.os }}
        PARALLEL_LEVEL: ${{ matrix.os == 'windows-2019' && '2' || '2' }}

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        path: wheelhouse/*.whl
        name: build_artifact

    - name: Download cache from container
      shell: bash
      if: (matrix.os == 'ubuntu-20.04') && (success() || failure())
      run: |
        ccache -s
        HOST_CCACHE_DIR="$(ccache --get-config cache_dir)"
        rm -rf $HOST_CCACHE_DIR
        mv ./wheelhouse/.ccache $HOST_CCACHE_DIR
        ls -la $HOST_CCACHE_DIR
        ccache -s

  upload_wheels:

    name: Upload wheels

    needs: [build_wheels]

    runs-on: ubuntu-latest
#    environment: pypi
#    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: build_artifact
          path: dist

      - uses: actions/download-artifact@v3
        if: ${{ needs.build_wheels.outputs.NATIVE_TOOLS_ARTIFACT }} != '' }}
        with:
          name: native_tools
          path: dist

      - name: Set up a release page
        id: setup_release
        run: |
          LLVM_PROJECT_COMMIT="${{ needs.build_wheels.outputs.LLVM_PROJECT_COMMIT }}"
          echo "MLIR Distribution created at $(date), build of [https://github.com/llvm/llvm-project/commit/${LLVM_PROJECT_COMMIT}](https://github.com/llvm/llvm-project/commit/${LLVM_PROJECT_COMMIT})" > body.md
          echo "tag_name=mlir-${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT
          echo "release_title=mlir-${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT

      - name: Release current commit
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "dist/*.whl,dist/*.tar.xz"
          bodyFile: body.md
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "latest"
          name: "latest"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true
