name: Distro

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        type: boolean
        required: false
        default: false
      debug_os:
        description: 'which runner os to run the tmate action in (if the tmate action is run)'
        type: string
        default: 'windows-2019'
        required: false
      debug_arch:
        description: 'which runner arch to run the tmate action in (if the tmate action is run)'
        type: string
        default: 'x86_64'
        required: false
      debug_detached:
        description: 'whether to launch tmate in detached mode (if the tmate action is run)'
        type: boolean
        required: false
        default: true
      llvm_commit:
        description: 'llvm commit to build'
        type: string
        required: false
        default: ''
      apply_patches:
        description: 'whether to apply patches to source'
        type: string
        required: false
        default: 'true'

  pull_request:
  release:
    types:
      - published

  schedule:
    # At minute 0 past hour 1. (see https://crontab.guru)
    - cron: '00 01 * * *'

jobs:

  get_llvm_project_commit:

    name: Get latest LLVM commit

    runs-on: ubuntu-latest
    outputs:
      LLVM_PROJECT_COMMIT: ${{ steps.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
      LLVM_DATETIME: ${{ steps.get_llvm_project_commit.outputs.LLVM_DATETIME }}
    steps:
      - name: Get llvm-project commit
        id: get_llvm_project_commit
        run: |
          if [ x"${{ inputs.llvm_commit }}" == x"" ]; then
            sudo apt install jq
            LLVM_PROJECT_COMMIT=$(curl -s https://api.github.com/repos/llvm/llvm-project/commits/main | jq -r '.sha[:8]')
          else
            LLVM_PROJECT_COMMIT="${{ inputs.llvm_commit }}"
          fi
          echo "LLVM_PROJECT_COMMIT=${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT
          DATETIME=$(date +"%Y.%m.%d.%H")
          echo "LLVM_DATETIME=${DATETIME}" | tee -a $GITHUB_OUTPUT

#  build_aarch64_wheels:
#    needs: get_llvm_project_commit
#    uses: makslevental/mlir-wheels/.github/workflows/build_arm64.yml@arm64_wheels
#    with:
#      llvm_commit: ${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
#      llvm_datetime: ${{ needs.get_llvm_project_commit.outputs.LLVM_DATETIME }}

  build:
    name: ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.build_cuda && 'cuda' || '' }} ${{ matrix.build_vulkan && 'vulkan' || '' }} ${{ matrix.build_openmp && 'openmp' || '' }}

    needs: get_llvm_project_commit
    continue-on-error: true

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: x86_64

          - os: ubuntu-20.04
            arch: aarch64

          - os: ubuntu-20.04
            arch: x86_64
            build_cuda: true

          - os: ubuntu-20.04
            arch: x86_64
            build_vulkan: true

          - os: ubuntu-20.04
            arch: x86_64
            build_openmp: true

          - os: windows-2019
            arch: AMD64

          - os: macos-11
            arch: x86_64

          - os: macos-11
            arch: arm64

          - os: macos-11
            arch: arm64
            build_vulkan: true

          - os: macos-11
            arch: arm64
            build_openmp: true

    steps:
    # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled && inputs.debug_os == matrix.os && inputs.debug_arch == matrix.arch }}
      with:
        limit-access-to-actor: true
        detached: ${{ inputs.debug_detached }}

    - name: Set workspace root
      id: workspace_root
      shell: bash
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      run: |
        if [ x"${{ matrix.os }}" == x"windows-2019" ]; then
          WORKSPACE_ROOT="/C/a"
        else
          WORKSPACE_ROOT=${GITHUB_WORKSPACE}
        fi
        
        mkdir -p $WORKSPACE_ROOT
        git clone -b $BRANCH_NAME https://github.com/${{ github.repository }}.git $WORKSPACE_ROOT
        
        if [ x"${{ matrix.os }}" == x"windows-2019" ]; then
          WORKSPACE_ROOT="C:\a"
        fi
        echo "WORKSPACE_ROOT=$WORKSPACE_ROOT" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT


    - uses: ilammy/msvc-dev-cmd@v1.4.1
      if: ${{ matrix.os == 'windows-2019' }}

    - name: Set up Visual Studio shell
      if: ${{ matrix.os == 'windows-2019' }}
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: MS Build
      if: ${{ matrix.os == 'windows-2019' }}
      uses: microsoft/setup-msbuild@v1.1

    - name: Free disk space
      if: contains(matrix.os, 'ubuntu')
      uses: jlumbroso/free-disk-space@76866dbe54312617f00798d1762df7f43def6e5c # v1.2.0
      with:
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: false # This frees space on the wrong partition.
        tool-cache: false # This includes Python, which we need.

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Get LLVM
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      shell: bash
      run: |
        curl -s https://codeload.github.com/llvm/llvm-project/zip/${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }} -o llvm.zip
        unzip -q llvm.zip
        LLVM_PROJECT_COMMIT=${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
        mv llvm-project-$LLVM_PROJECT_COMMIT llvm-project
        echo "LLVM_PROJECT_COMMIT=$LLVM_PROJECT_COMMIT" | tee -a $GITHUB_ENV
        echo "LLVM_PROJECT_MAIN_SRC_DIR=$PWD/llvm-project" | tee -a $GITHUB_ENV
        echo "LLVM_DATETIME=${{ needs.get_llvm_project_commit.outputs.LLVM_DATETIME }}" | tee -a $GITHUB_ENV

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.9
      with:
        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.arch }}  # Make cache specific to OS
        max-size: "5G"

    - name: Configure ccache dir on host
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      id: configure_ccache_dir_on_host
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        HOST_CCACHE_DIR="$(ccache --get-config cache_dir)"
        mkdir -p $HOST_CCACHE_DIR
        echo "HOST_CCACHE_DIR=$HOST_CCACHE_DIR" | tee -a $GITHUB_ENV
        echo "HOST_CCACHE_DIR=$HOST_CCACHE_DIR" | tee -a $GITHUB_OUTPUT

    - name: Configure ccache on Mac
      if: ${{ matrix.os == 'macos-11' }}
      run: |
        export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"

    - name: Install Ninja
      uses: llvm/actions/install-ninja@6a57890d0e3f9f35dfc72e7e48bc5e1e527cdd6c # Jan 17

    - name: Install cross-compilation toolchain
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.arch == 'aarch64' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y binutils-aarch64-linux-gnu \
          g++-aarch64-linux-gnu gcc-aarch64-linux-gnu

    - name: cibuildwheel
      shell: bash
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      if: ${{ matrix.os != 'ubuntu-20.04' || matrix.arch != 'aarch64' }}
      run: |
        pip install cibuildwheel
        
        PIP_FIND_LINKS="https://makslevental.github.io/wheels" \
        BUILD_CUDA=${{ matrix.build_cuda }} \
        BUILD_OPENMP=${{ matrix.build_openmp }} \
        BUILD_VULKAN=${{ matrix.build_vulkan }} \
        CIBW_ARCHS=${{ matrix.arch }} \
        HOST_CCACHE_DIR=${{ steps.configure_ccache_dir_on_host.outputs.HOST_CCACHE_DIR }} \
        LLVM_PROJECT_COMMIT=${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }} \
        LLVM_DATETIME=${{ needs.get_llvm_project_commit.outputs.LLVM_DATETIME }} \
        LLVM_PROJECT_MAIN_SRC_DIR=${{ matrix.os == 'ubuntu-20.04' && '/project/llvm-project' || 'llvm-project' }} \
        MATRIX_OS=${{ matrix.os }} \
        CMAKE_GENERATOR="Ninja" \
        PARALLEL_LEVEL=${{ matrix.os == 'windows-2019' && '2' || '2' }} \
        APPLY_PATCHES=${{ inputs.apply_patches == '' && 'true' || inputs.apply_patches }} \
        cibuildwheel --output-dir wheelhouse

    - name: build aarch ubuntu wheel
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      shell: bash
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.arch == 'aarch64' }}
      run: |
        PIP_FIND_LINKS="https://makslevental.github.io/wheels" \
        CIBW_ARCHS=${{ matrix.arch }} \
        LLVM_PROJECT_COMMIT=${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }} \
        LLVM_DATETIME=${{ needs.get_llvm_project_commit.outputs.LLVM_DATETIME }} \
        BUILD_CUDA=${{ matrix.build_cuda }} \
        BUILD_OPENMP=${{ matrix.build_openmp }} \
        BUILD_VULKAN=${{ matrix.build_vulkan }} \
        CMAKE_GENERATOR=Ninja \
        pip wheel . -v -w wheelhouse

    - name: rename
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      shell: bash
      if: ${{ matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-11' }}
      run: |
        if [ x"${{ matrix.os }}" == x"macos-11" ]; then
          brew install rename
        else
          sudo apt-get install -y rename
        fi
        rename 's/cp311-cp311/py3-none/' wheelhouse/mlir-*whl
        
        if [ x"${{ matrix.os }}" == x"ubuntu-20.04" ] && [ x"${{ matrix.arch }}" == x"aarch64" ]; then
          rename 's/x86_64/aarch64/' wheelhouse/mlir-*whl
        fi

    - name: rename
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      if: ${{ matrix.os == 'windows-2019' }}
      run: |
        ls wheelhouse/mlir-*whl | Rename-Item -NewName {$_ -replace 'cp311-cp311', 'py3-none' }

    - name: Download cache from container
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      shell: bash
      if: (matrix.os == 'ubuntu-20.04' && matrix.arch == 'x86_64') && (success() || failure())
      run: |
        ccache -s
        HOST_CCACHE_DIR="$(ccache --get-config cache_dir)"
        rm -rf $HOST_CCACHE_DIR
        mv ./wheelhouse/.ccache $HOST_CCACHE_DIR
        ls -la $HOST_CCACHE_DIR
        ccache -s

    - name: Build native_tools wheel
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      shell: bash
      if: ${{ matrix.os != 'ubuntu-20.04' || matrix.arch != 'aarch64' }}
      id: build_native_tools_wheel
      run: |
        for TOOL in "llvm-tblgen" "mlir-tblgen" "mlir-linalg-ods-yaml-gen" "mlir-pdll" "llvm-config" "FileCheck"; do
          if [ x"${{ matrix.os }}" == x"windows-2019" ]; then
            TOOL="$TOOL.exe"
          fi
          unzip -j wheelhouse/mlir-*whl "mlir/bin/$TOOL" -d native_tools/
        done
        
        if [ x"${{ matrix.os }}" == x"ubuntu-20.04" ]; then
          PLAT="manylinux_2_17"
        elif [ x"${{ matrix.os }}" == x"macos-11" ]; then
          PLAT="macosx_11_0"
        elif [ x"${{ matrix.os }}" == x"windows-2019" ]; then
          PLAT="win"
        fi
        
        pip install wheel
        PLAT=${PLAT}_$(echo ${{ matrix.arch }} | tr '[:upper:]' '[:lower:]')
        pushd native_tools
        python setup.py bdist_wheel --dist-dir ../wheelhouse --plat $PLAT
        popd

    - name: Upload wheels
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        path: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}/wheelhouse/*.whl
        name: build_artifact

    - name: Free some space
      working-directory: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}
      shell: bash
      run: |
        rm -rf wheelhouse/*.whl
        rm -rf llvm-project
        rm -rf llvm.zip
        rm -rf build

  upload_distro_wheels:
    needs: [build, get_llvm_project_commit]

    runs-on: ubuntu-latest
#    environment: pypi
#    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: build_artifact
          path: dist

      - name: Set up a release page
        id: setup_release
        run: |
          LLVM_PROJECT_COMMIT="${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}"
          echo "MLIR Distribution created at $(date), build of [https://github.com/llvm/llvm-project/commit/${LLVM_PROJECT_COMMIT}](https://github.com/llvm/llvm-project/commit/${LLVM_PROJECT_COMMIT})" > body.md
          echo "tag_name=mlir-${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT
          echo "release_title=mlir-${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT

      - name: Release current commit
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "dist/*.whl,dist/*.tar.xz"
          bodyFile: body.md
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "latest"
          name: "latest"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true

      - name: Release current commit
        uses: ncipollo/release-action@v1.12.0
        with:
          owner: makslevental
          repo: wheels
          artifacts: "dist/*.whl"
          token: "${{ secrets.WHEELS_REPO }}"
          tag: "i"
          name: "i"
          removeArtifacts: false
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true
