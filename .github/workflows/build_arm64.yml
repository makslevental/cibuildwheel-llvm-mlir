name: Build MLIR arm64

on:
  workflow_call:
    inputs:
      llvm_commit:
        description: 'llvm commit to build'
        type: string
        required: true
        default: ''
      llvm_datetime:
        type: string
        required: false
        default: ''

jobs:
  build:

    name: Build distro of MLIR
    #    runs-on: ${{ (matrix.os == 'windows-2019' && 'self-hosted') || matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            arch: AArch64

    steps:
      - name: Set up Python
        uses: actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984 # v4.3.0
        with:
          python-version: "3.11"

      - name: Free disk space
        if: contains(matrix.os, 'ubuntu')
        uses: jlumbroso/free-disk-space@76866dbe54312617f00798d1762df7f43def6e5c # v1.2.0
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: false # This frees space on the wrong partition.
          tool-cache: false # This includes Python, which we need.

      - uses: ilammy/msvc-dev-cmd@v1.4.1

# chocolatey vswhere
# choco install powershell-core -> add pwsh.exe to path
# choco install git and add bash.exe to path

      - name: Set up Visual Studio shell
        if: ${{ matrix.os == 'windows-2019' }}
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: MS Build
        if: ${{ matrix.os == 'windows-2019' }}
        uses: microsoft/setup-msbuild@v1.1

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled && inputs.debug_os == matrix.os }}
        with:
          limit-access-to-actor: true
          detached: ${{ inputs.debug_detached }}

      - name: Set workspace root
        id: workspace_root
        shell: bash
        run: |
          if [ x"${{ matrix.os }}" == x"windows-2019" ]; then
            mkdir -p /C/a
            echo "WORKSPACE_ROOT=/C/a" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          else
            echo "WORKSPACE_ROOT=${GITHUB_WORKSPACE}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
          fi

      - name: Checkout this repo
        uses: actions/checkout@v3
        with:
          path: ${{ steps.workspace_root.outputs.WORKSPACE_ROOT }}

      - name: Get LLVM
        shell: bash
        run: |
          cd $WORKSPACE_ROOT
          
          curl -s https://codeload.github.com/llvm/llvm-project/zip/${{ inputs.llvm_commit }} -o llvm.zip
          unzip -q llvm.zip
          LLVM_PROJECT_COMMIT=${{ inputs.llvm_commit }}
          mv llvm-project-$LLVM_PROJECT_COMMIT llvm-project
          LLVM_INSTALL_DIR_NAME=binary_dist/mlir
          
          echo "LLVM_PROJECT_INSTALL_DIR=$WORKSPACE_ROOT/binary_dist/mlir" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_COMMIT=$LLVM_PROJECT_COMMIT" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_MAIN_SRC_DIR=$PWD/llvm-project" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_MAIN_BINARY_DIR=${WORKSPACE_ROOT}/build" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_HOST_MAIN_BINARY_DIR=$PWD/build_host" | tee -a $GITHUB_ENV
          echo "LLVM_DATETIME=${{ inputs.llvm_datetime }}" | tee -a $GITHUB_ENV

      - name: Install Python depends
        shell: bash
        run: |
          python -m pip install -r ${LLVM_PROJECT_MAIN_SRC_DIR}/mlir/python/requirements.txt

      - name: Install Ninja
        uses: llvm/actions/install-ninja@6a57890d0e3f9f35dfc72e7e48bc5e1e527cdd6c # Jan 17

      - name: Ccache for C++ compilation
        uses: hendrikmuhs/ccache-action@621a41397ed83711c72862638d9ff6e63fca3041 # v1.2.3
        with:
          key: ${{ matrix.os }}-${{ matrix.arch }}-llvm-project
          # LLVM needs serious cache size
          max-size: 6G

      - name: Install cross-compilation toolchain
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils-aarch64-linux-gnu \
            g++-aarch64-linux-gnu gcc-aarch64-linux-gnu

      - name: Choose compiler and set env vars
        shell: bash
        run: |
          if [ x"${{ matrix.os }}" == x"ubuntu-20.04" ]; then
            echo "ARCH=AArch64" | tee -a $GITHUB_ENV
            echo "CXX_COMPILER=aarch64-linux-gnu-g++" | tee -a $GITHUB_ENV
            echo "C_COMPILER=aarch64-linux-gnu-gcc" | tee -a $GITHUB_ENV
            echo "LLVM_DEFAULT_TARGET_TRIPLE=aarch64-linux-gnu" | tee -a $GITHUB_ENV
            echo "LLVM_HOST_TRIPLE=aarch64-linux-gnu" | tee -a $GITHUB_ENV
            echo "STATIC_FLAGS=-static-libgcc -static-libstdc++" | tee -a $GITHUB_ENV
            echo "GENERATOR=Ninja" | tee -a $GITHUB_ENV
          fi

      - name: Build host llvmtblgen/mlirtblgen
        shell: bash
        run: |
          cd $WORKSPACE_ROOT
          
          if [ x"${{ matrix.os }}" == x"ubuntu-20.04" ]; then
            export CXX_COMPILER=g++
            export C_COMPILER=gcc
          fi
          cmake \
            -G "$GENERATOR" \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
            -DCMAKE_CXX_FLAGS="-O2 ${STATIC_FLAGS}" \
            -DCMAKE_C_COMPILER=$C_COMPILER \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_ENABLE_ZLIB=OFF \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -S${LLVM_PROJECT_MAIN_SRC_DIR}/llvm \
            -B${LLVM_PROJECT_HOST_MAIN_BINARY_DIR}
          
          cmake --build ${LLVM_PROJECT_HOST_MAIN_BINARY_DIR} \
            --target llvm-tblgen mlir-tblgen mlir-linalg-ods-yaml-gen mlir-pdll -j 20

      - name: Apply patches
        shell: bash
        run: |
          cd $WORKSPACE_ROOT
          APPLY_PATCHES=true ./scripts/apply_patches.sh

      - name: Configure CMake
        shell: bash
        run: |
          cd $WORKSPACE_ROOT
          
          LLVM_ENABLE_PROJECTS="llvm;mlir"
          
          CMAKE_CONFIGS="\
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
            -DCMAKE_C_COMPILER=$C_COMPILER \
            -DCMAKE_INSTALL_PREFIX=$LLVM_PROJECT_INSTALL_DIR \
            \
            -DLLVM_BUILD_BENCHMARKS=OFF \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_BUILD_RUNTIMES=OFF \
            -DLLVM_BUILD_TESTS=OFF \
            -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_BUILD_UTILS=ON \
            -DLLVM_CCACHE_BUILD=ON \
            -DLLVM_DEFAULT_TARGET_TRIPLE=$LLVM_DEFAULT_TARGET_TRIPLE \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ENABLE_PROJECTS=$LLVM_ENABLE_PROJECTS \
            -DLLVM_ENABLE_RTTI=ON \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_HOST_TRIPLE=$LLVM_HOST_TRIPLE \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_RUNTIMES=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_TOOLS=ON \
            -DLLVM_INCLUDE_UTILS=ON \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_TARGET_ARCH=$ARCH \
            \
            -DMLIR_BUILD_MLIR_C_DYLIB=1 \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DMLIR_ENABLE_EXECUTION_ENGINE=ON \
            -DMLIR_ENABLE_SPIRV_CPU_RUNNER=ON \
            -DMLIR_INCLUDE_TESTS=ON \
            \
            -DPython3_EXECUTABLE=$(which python)"
          
          LLVM_TARGETS_TO_BUILD=$ARCH
          
          CMAKE_CONFIGS="${CMAKE_CONFIGS} -DLLVM_TARGETS_TO_BUILD=$LLVM_TARGETS_TO_BUILD"
          
          echo $CMAKE_CONFIGS
          
          if [ x"${{ matrix.os }}" == x"ubuntu-20.04" ]; then
          
            cmake $CMAKE_CONFIGS \
                -G "$GENERATOR" \
                -DLLVM_USE_HOST_TOOLS=ON \
                -DLLVM_TABLEGEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/llvm-tblgen \
                -DMLIR_LINALG_ODS_YAML_GEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-linalg-ods-yaml-gen \
                -DMLIR_LINALG_ODS_YAML_GEN_EXE=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-linalg-ods-yaml-gen \
                -DMLIR_PDLL_TABLEGEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-pdll \
                -DMLIR_TABLEGEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-tblgen \
                -DCMAKE_CXX_FLAGS="-O2 ${STATIC_FLAGS}" \
                -S${LLVM_PROJECT_MAIN_SRC_DIR}/llvm \
                -B${LLVM_PROJECT_MAIN_BINARY_DIR}
          fi

      - name: Build distro
        shell: bash
        run: |
          cd $WORKSPACE_ROOT
          cmake --build ${LLVM_PROJECT_MAIN_BINARY_DIR} --target install -j
          ccache -s

      - name: Build MLIR Python bindings wheel
        shell: bash
        run: |
          cd $WORKSPACE_ROOT/binary_dist
          
          python -m pip install wheel
          if [ x"${{ matrix.os }}" == x"ubuntu-20.04" ]; then
            PLATFORM_NAME="manylinux2014"
            ARCH=aarch64
          fi
          
          mkdir -p $GITHUB_WORKSPACE/wheelhouse
          cp __init__.py mlir/
          python setup.py bdist_wheel --plat-name "${PLATFORM_NAME}_${ARCH}" --dist-dir $GITHUB_WORKSPACE/wheelhouse

      - name: rename
        shell: bash
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt-get install -y rename
          rename 's/cp311-cp311/py3-none/' wheelhouse/mlir-*whl

      - name: rename
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          ls wheelhouse/mlir-*whl | Rename-Item -NewName {$_ -replace 'cp311-cp311', 'py3-none' }

      - name: Upload wheels
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl
          name: build_artifact
